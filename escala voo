import tkinter as tk
from tkinter import messagebox

class Voo:
    def __init__(self, numero_voo, origem, destino, data, horario):
        self.numero_voo = numero_voo
        self.origem = origem
        self.destino = destino
        self.data = data
        self.horario = horario
        self.escalas = []

    def adicionar_escala(self, cidade, data):
        self.escalas.append((cidade, data))

    def __str__(self):
        info_voo = f"Voo {self.numero_voo}: {self.origem} -> {self.destino} em {self.data} às {self.horario}"
        if self.escalas:
            info_voo += "\nEscalas:"
            for cidade, data in self.escalas:
                info_voo += f"\n - {cidade} em {data}"
        return info_voo

class EscalaDeVoos:
    def __init__(self):
        self.voos = []

    def adicionar_voo(self, numero_voo, origem, destino, data, horario):
        novo_voo = Voo(numero_voo, origem, destino, data, horario)
        self.voos.append(novo_voo)

    def exibir_voos(self):
        return [str(voo) for voo in self.voos]

    def buscar_voo(self, numero_voo):
        for voo in self.voos:
            if voo.numero_voo == numero_voo:
                return voo
        return None

# Funções da Interface
def adicionar_voo():
    numero_voo = entry_numero_voo.get()
    origem = entry_origem.get()
    destino = entry_destino.get()
    data = entry_data.get()
    horario = entry_horario.get()

    if numero_voo and origem and destino and data and horario:
        escala.adicionar_voo(numero_voo, origem, destino, data, horario)
        messagebox.showinfo("Sucesso", "Voo adicionado com sucesso!")
        limpar_campos()
    else:
        messagebox.showerror("Erro", "Todos os campos são obrigatórios.")

def exibir_voos():
    lista_voos.delete(0, tk.END)
    voos = escala.exibir_voos()
    if voos:
        for voo in voos:
            lista_voos.insert(tk.END, voo)
    else:
        lista_voos.insert(tk.END, "Nenhum voo cadastrado.")

def buscar_voo():
    numero_voo = entry_numero_voo.get()
    if numero_voo:
        voo = escala.buscar_voo(numero_voo)
        if voo:
            lista_voos.delete(0, tk.END)
            lista_voos.insert(tk.END, str(voo))
        else:
            messagebox.showerror("Erro", "Voo não encontrado.")
    else:
        messagebox.showerror("Erro", "Insira o número do voo para buscar.")

def adicionar_escala():
    numero_voo = entry_numero_voo.get()
    cidade = entry_cidade_escala.get()
    data = entry_data_escala.get()

    if numero_voo and cidade and data:
        voo = escala.buscar_voo(numero_voo)
        if voo:
            voo.adicionar_escala(cidade, data)
            messagebox.showinfo("Sucesso", f"Escala em {cidade} adicionada ao voo {numero_voo}!")
            limpar_campos_escala()
        else:
            messagebox.showerror("Erro", "Voo não encontrado.")
    else:
        messagebox.showerror("Erro", "Todos os campos da escala são obrigatórios.")

def limpar_campos():
    entry_numero_voo.delete(0, tk.END)
    entry_data.delete(0, tk.END)

def limpar_campos_escala():
    entry_cidade_escala.delete(0, tk.END)
    entry_data_escala.delete(0, tk.END)

# Inicialização da janela principal
root = tk.Tk()
root.title("Escala de Voos")

escala = EscalaDeVoos()

# Layout da Interface - Adicionar Voo
frame_form = tk.Frame(root)
frame_form.pack(pady=10)

tk.Label(frame_form, text="Número do Voo:").grid(row=0, column=0)
entry_numero_voo = tk.Entry(frame_form)
entry_numero_voo.grid(row=0, column=1)

tk.Label(frame_form, text="Cidade de Origem:").grid(row=1, column=0)
entry_origem = tk.Entry(frame_form)
entry_origem.insert(0, "       ")  # Valor padrão para origem
entry_origem.grid(row=1, column=1)

tk.Label(frame_form, text="Cidade de Destino:").grid(row=2, column=0)
entry_destino = tk.Entry(frame_form)
entry_destino.insert(0, "       ")  # Valor padrão para destino
entry_destino.grid(row=2, column=1)

tk.Label(frame_form, text="Data (DD/MM/AAAA):").grid(row=3, column=0)
entry_data = tk.Entry(frame_form)
entry_data.grid(row=3, column=1)

tk.Label(frame_form, text="Horário (HH:MM):").grid(row=4, column=0)
entry_horario = tk.Entry(frame_form)
entry_horario.insert(0, "14:00 - 16:00")  # Valor padrão para o horário
entry_horario.grid(row=4, column=1)

# Botões para voo
frame_buttons = tk.Frame(root)
frame_buttons.pack(pady=10)

btn_adicionar = tk.Button(frame_buttons, text="Adicionar Voo", command=adicionar_voo)
btn_adicionar.grid(row=0, column=0, padx=5)

btn_exibir = tk.Button(frame_buttons, text="Exibir Todos os Voos", command=exibir_voos)
btn_exibir.grid(row=0, column=1, padx=5)

btn_buscar = tk.Button(frame_buttons, text="Buscar Voo", command=buscar_voo)
btn_buscar.grid(row=0, column=2, padx=5)

# Layout da Interface - Adicionar Escala
frame_escala = tk.Frame(root)
frame_escala.pack(pady=10)

tk.Label(frame_escala, text="Cidade da Escala:").grid(row=0, column=0)
entry_cidade_escala = tk.Entry(frame_escala)
entry_cidade_escala.grid(row=0, column=1)

tk.Label(frame_escala, text="Data da Escala (DD/MM/AAAA):").grid(row=1, column=0)
entry_data_escala = tk.Entry(frame_escala)
entry_data_escala.grid(row=1, column=1)

btn_adicionar_escala = tk.Button(frame_escala, text="Adicionar Escala", command=adicionar_escala)
btn_adicionar_escala.grid(row=2, columnspan=2, pady=10)

# Lista de Voos
lista_voos = tk.Listbox(root, width=60, height=10)
lista_voos.pack(pady=10)

root.mainloop()
